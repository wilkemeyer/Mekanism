package mekanism.client.model;


import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

@SideOnly(Side.CLIENT)
public class ModelRotaryCondensentrator extends FastModelBase
{
	FastModelRenderer portRight;
	FastModelRenderer tankRight;
	FastModelRenderer base;
	FastModelRenderer pipe;
	FastModelRenderer middle;
	FastModelRenderer shaft;
	FastModelRenderer portLeft;
	FastModelRenderer tankLeft;
	FastModelRenderer support4;
	FastModelRenderer bridge;
	FastModelRenderer tube8;
	FastModelRenderer tube7;
	FastModelRenderer tube6;
	FastModelRenderer tube5;
	FastModelRenderer tube4;
	FastModelRenderer tube3;
	FastModelRenderer tube2;
	FastModelRenderer tube1;
	FastModelRenderer top;
	FastModelRenderer support3;
	FastModelRenderer support2;
	FastModelRenderer support1;

	public ModelRotaryCondensentrator() 
	{
		textureWidth = 128;
		textureHeight = 64;

		portRight = new FastModelRenderer(this, 82, 31);
		portRight.addBox(0F, 0F, 0F, 1, 10, 10);
		portRight.setRotationPoint(7.01F, 11F, -5F);
		portRight.setTextureSize(128, 64);
		portRight.mirror = true;
		setRotation(portRight, 0F, 0F, 0F);
		tankRight = new FastModelRenderer(this, 64, 9);
		tankRight.mirror = true;
		tankRight.addBox(0F, 0F, 0F, 6, 8, 14);
		tankRight.setRotationPoint(1F, 11F, -7F);
		tankRight.setTextureSize(128, 64);
		setRotation(tankRight, 0F, 0F, 0F);
		base = new FastModelRenderer(this, 0, 34);
		base.addBox(0F, 0F, 0F, 16, 5, 16);
		base.setRotationPoint(-8F, 19F, -8F);
		base.setTextureSize(128, 64);
		base.mirror = true;
		setRotation(base, 0F, 0F, 0F);
		pipe = new FastModelRenderer(this, 0, 4);
		pipe.addBox(0F, 0F, 0F, 2, 6, 6);
		pipe.setRotationPoint(-1.01F, 13F, -3F);
		pipe.setTextureSize(128, 64);
		pipe.mirror = true;
		setRotation(pipe, 0F, 0F, 0F);
		middle = new FastModelRenderer(this, 0, 17);
		middle.addBox(0F, 0F, 0F, 16, 1, 16);
		middle.setRotationPoint(-8F, 10F, -8F);
		middle.setTextureSize(128, 64);
		middle.mirror = true;
		setRotation(middle, 0F, 0F, 0F);
		shaft = new FastModelRenderer(this, 12, 0);
		shaft.addBox(0F, 0F, 0F, 1, 2, 1);
		shaft.setRotationPoint(-0.5F, 11F, -0.5F);
		shaft.setTextureSize(128, 64);
		shaft.mirror = true;
		setRotation(shaft, 0F, 0F, 0F);
		portLeft = new FastModelRenderer(this, 64, 31);
		portLeft.addBox(0F, 0F, 0F, 1, 8, 8);
		portLeft.setRotationPoint(-8.01F, 12F, -4F);
		portLeft.setTextureSize(128, 64);
		portLeft.mirror = true;
		setRotation(portLeft, 0F, 0F, 0F);
		tankLeft = new FastModelRenderer(this, 64, 9);
		tankLeft.addBox(0F, 0F, 0F, 6, 8, 14);
		tankLeft.setRotationPoint(-7F, 11F, -7F);
		tankLeft.setTextureSize(128, 64);
		tankLeft.mirror = true;
		setRotation(tankLeft, 0F, 0F, 0F);
		support4 = new FastModelRenderer(this, 7, 0);
		support4.addBox(0F, 0F, 0F, 1, 1, 1);
		support4.setRotationPoint(6F, 9F, 6F);
		support4.setTextureSize(128, 64);
		support4.mirror = true;
		setRotation(support4, 0F, 0F, 0F);
		bridge = new FastModelRenderer(this, 64, 0);
		bridge.addBox(0F, 0F, 0F, 8, 1, 8);
		bridge.setRotationPoint(-4F, 9F, -4F);
		bridge.setTextureSize(128, 64);
		bridge.mirror = true;
		setRotation(bridge, 0F, 0F, 0F);
		tube8 = new FastModelRenderer(this, 0, 0);
		tube8.addBox(0F, 0F, 0F, 2, 1, 1);
		tube8.setRotationPoint(-1F, 18F, 5F);
		tube8.setTextureSize(128, 64);
		tube8.mirror = true;
		setRotation(tube8, 0F, 0F, 0F);
		tube7 = new FastModelRenderer(this, 0, 0);
		tube7.addBox(0F, 0F, 0F, 2, 1, 1);
		tube7.setRotationPoint(-1F, 12F, 5F);
		tube7.setTextureSize(128, 64);
		tube7.mirror = true;
		setRotation(tube7, 0F, 0F, 0F);
		tube6 = new FastModelRenderer(this, 0, 0);
		tube6.addBox(0F, 0F, 0F, 2, 1, 1);
		tube6.setRotationPoint(-1F, 14F, 5F);
		tube6.setTextureSize(128, 64);
		tube6.mirror = true;
		setRotation(tube6, 0F, 0F, 0F);
		tube5 = new FastModelRenderer(this, 0, 0);
		tube5.addBox(0F, 0F, 0F, 2, 1, 1);
		tube5.setRotationPoint(-1F, 16F, 5F);
		tube5.setTextureSize(128, 64);
		tube5.mirror = true;
		setRotation(tube5, 0F, 0F, 0F);
		tube4 = new FastModelRenderer(this, 0, 0);
		tube4.addBox(0F, 0F, 0F, 2, 1, 1);
		tube4.setRotationPoint(-1F, 18F, -6F);
		tube4.setTextureSize(128, 64);
		tube4.mirror = true;
		setRotation(tube4, 0F, 0F, 0F);
		tube3 = new FastModelRenderer(this, 0, 0);
		tube3.addBox(0F, 0F, 0F, 2, 1, 1);
		tube3.setRotationPoint(-1F, 16F, -6F);
		tube3.setTextureSize(128, 64);
		tube3.mirror = true;
		setRotation(tube3, 0F, 0F, 0F);
		tube2 = new FastModelRenderer(this, 0, 0);
		tube2.addBox(0F, 0F, 0F, 2, 1, 1);
		tube2.setRotationPoint(-1F, 14F, -6F);
		tube2.setTextureSize(128, 64);
		tube2.mirror = true;
		setRotation(tube2, 0F, 0F, 0F);
		tube1 = new FastModelRenderer(this, 0, 0);
		tube1.addBox(0F, 0F, 0F, 2, 1, 1);
		tube1.setRotationPoint(-1F, 12F, -6F);
		tube1.setTextureSize(128, 64);
		tube1.mirror = true;
		setRotation(tube1, 0F, 0F, 0F);
		top = new FastModelRenderer(this, 0, 0);
		top.addBox(0F, 0F, 0F, 16, 1, 16);
		top.setRotationPoint(-8F, 8F, -8F);
		top.setTextureSize(128, 64);
		top.mirror = true;
		setRotation(top, 0F, 0F, 0F);
		support3 = new FastModelRenderer(this, 7, 0);
		support3.addBox(0F, 0F, 0F, 1, 1, 1);
		support3.setRotationPoint(6F, 9F, -7F);
		support3.setTextureSize(128, 64);
		support3.mirror = true;
		setRotation(support3, 0F, 0F, 0F);
		support2 = new FastModelRenderer(this, 7, 0);
		support2.addBox(0F, 0F, 0F, 1, 1, 1);
		support2.setRotationPoint(-7F, 9F, -7F);
		support2.setTextureSize(128, 64);
		support2.mirror = true;
		setRotation(support2, 0F, 0F, 0F);
		support1 = new FastModelRenderer(this, 7, 0);
		support1.addBox(0F, 0F, 0F, 1, 1, 1);
		support1.setRotationPoint(-7F, 9F, 6F);
		support1.setTextureSize(128, 64);
		support1.mirror = true;
		setRotation(support1, 0F, 0F, 0F);
	}

	private void setRotation(FastModelRenderer model, float x, float y, float z)
	{
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}
}
