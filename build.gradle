defaultTasks 'fullBuild'

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name 'CB Maven FS'
        url "http://chickenbones.net/maven/"
    }
	maven {
		name = "ic2-and-forestry"
		url = "http://maven.ic2.player.to/"
	}
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
     }
    maven {
        name "Mobius"
        url "http://mobiusstrip.eu/maven"
    }
    ivy {
        name "BuildCraft"
        artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
    }

}

apply plugin: 'idea'

idea {
    module {
        // For some reason this is necessary for IDEA 2014 workspaces to recognize assets
        inheritOutputDirs = true
    }
}

apply plugin: 'forge'

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config. It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

dependencies {
	compile "net.industrial-craft:industrialcraft-2:${config.IC2_version}:api"
	compile "com.mod-buildcraft:buildcraft:${config.BUILDCRAFT_version}:dev"
	compile "mcp.mobius.waila:Waila:${config.WAILA_version}_${config.minecraft_version}:dev"
	
    compile "codechicken:CodeChickenLib:${config.minecraft_version}-${config.CCLIB_version}:dev"
    compile "codechicken:ForgeMultipart:${config.minecraft_version}-${config.FMP_version}:dev"
    compile "codechicken:NotEnoughItems:${config.minecraft_version}-${config.NEI_version}:dev"
    compile "codechicken:CodeChickenCore:${config.minecraft_version}-${config.CCC_version}:dev"
}

version = "${config.minecraft_version}-${config.mod_version}." + (System.env.BUILD_NUMBER ?: "homebaked")
archivesBaseName = "MekanismAll"
libsDirName = "../output"
distsDirName = "../output"
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
}

processResources
{
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude '**/*.blend*'
    }
}

task coreJar(type: Jar) {
    baseName = 'Mekanism'

    manifest {
        attributes 'FMLCorePlugin': 'mekanism.common.asm.LoadingHook'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }

    from('etc/core') {
        include '*.info'
        expand 'version': config.mod_version, 'mc_version': config.minecraft_version, 'fmp_version': config.FMP_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        exclude 'mekanism/tools/**', 'mekanism/generators/**', 'mcmod.info'
    }
}

task toolsJar(type: Jar) {
    baseName = 'MekanismTools'

    from('etc/tools') {
        include '*.info'
        expand 'version':config.mod_version,'mc_version':config.minecraft_version,'fmp_version':config.FMP_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'mekanism/tools/**'
    }
}

task generatorsJar(type: Jar) {
    baseName = 'MekanismGenerators'

    from('etc/generators') {
        include '*.info'
        expand 'version':config.mod_version,'mc_version':config.minecraft_version,'fmp_version':config.FMP_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'mekanism/generators/**'
    }
}

coreJar.dependsOn('reobf')
toolsJar.dependsOn('reobf')
generatorsJar.dependsOn('reobf')

task MDKZip(type: Zip) {
    baseName = 'MDK'
    from sourceSets.main.java.srcDirs
    include 'mekanism/api/**'
}

task releaseJars(type: Copy) {
    from coreJar
    from toolsJar
    from generatorsJar
    from MDKZip
    rename '-(.*)jar', '.jar'
    rename '-(.*)zip', '.zip'
    into '.'
}

task fullBuild(type: Delete) {
    delete jar
}

fullBuild.dependsOn('releaseJars')
